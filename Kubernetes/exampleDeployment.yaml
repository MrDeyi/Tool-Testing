# ------------------------------
# Deployment: Defines how your application (Pods) should run
# ------------------------------
apiVersion: apps/v1            # The API group and version for Deployments
kind: Deployment               # We are creating a Deployment resource
metadata:
  name: nginx-deployment       # Name of the Deployment (must be unique in the namespace)
  labels:                      # Labels are key/value pairs to help identify this resource
    app: nginx

spec:                          # Specification of the Deployment
  replicas: 3                  # Run 3 replicas (Pods) of this application for redundancy
  selector:                    # Defines how Deployment finds which Pods it manages
    matchLabels:
      app: nginx               # It will manage Pods that have this label
  template:                    # Template describes the Pods that will be created
    metadata:
      labels:
        app: nginx             # Every Pod will get this label
    spec:
      containers:              # List of containers inside each Pod
      - name: nginx            # Container name
        image: nginx:1.25      # The container image from Docker Hub (nginx v1.25)
        ports:
        - containerPort: 80    # Container listens on port 80
        resources:             # Resource requests & limits (optional but recommended)
          requests:
            cpu: "100m"        # Requests 0.1 CPU core (minimum guaranteed)
            memory: "128Mi"    # Requests 128 MB RAM
          limits:
            cpu: "250m"        # Max CPU allowed: 0.25 cores
            memory: "256Mi"    # Max memory allowed: 256 MB
        readinessProbe:        # Checks if container is ready to receive traffic
          httpGet:
            path: /            # Kubernetes will send an HTTP GET to this path
            port: 80
          initialDelaySeconds: 5   # Wait 5 seconds before starting checks
          periodSeconds: 10        # Check every 10 seconds
        livenessProbe:         # Checks if container is still alive
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10  # Wait 10s before starting checks
          periodSeconds: 20        # Check every 20s

---
# ------------------------------
# Service: Exposes Pods internally or externally
# ------------------------------
apiVersion: v1
kind: Service
metadata:
  name: nginx-service           # Name of the Service
spec:
  selector:
    app: nginx                  # Match Pods with label app=nginx
  ports:
  - protocol: TCP
    port: 80                    # The port the Service will expose (ClusterIP port)
    targetPort: 80              # The port on the Podâ€™s container
  type: ClusterIP               # Service type: ClusterIP (only accessible inside cluster)
                                # Other options:
                                # - NodePort (expose via <NodeIP>:<Port>)
                                # - LoadBalancer (cloud provider assigns external IP)